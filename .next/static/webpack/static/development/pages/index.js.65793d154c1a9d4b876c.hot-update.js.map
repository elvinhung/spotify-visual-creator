{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.65793d154c1a9d4b876c.hot-update.js","sources":["webpack:///./components/AnimationPanel.jsx"],"sourcesContent":["import * as THREE from 'three';\r\nimport React from 'react';\r\nimport '../styles/AnimationPanel.scss'\r\n\r\nclass AnimationPanel extends React.Component {\r\n\r\n  componentDidMount() {\r\n    let scene = new THREE.Scene();\r\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n    let renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5);\r\n    this.mount.appendChild(renderer.domElement);\r\n    let material = new THREE.LineBasicMaterial({\r\n      color: 0xfd44f5,\r\n    });\r\n\r\n    let geometry = new THREE.Geometry();\r\n    geometry.vertices.push(\r\n      new THREE.Vector3( 0, 0.5, 10 ),\r\n      new THREE.Vector3( 0, 0, 0 )\r\n    );\r\n\r\n    let angleDeltas = [];\r\n    let lines = [];\r\n    for (let i = 0; i < 40; i++) {\r\n      const line = new THREE.Line(geometry, material);\r\n      if (i < 20) {\r\n        line.rotateY(0.07 * i);\r\n      } else {\r\n        line.rotateY(-0.07 * (i - 10));\r\n      }\r\n      lines.push(line);\r\n      angleDeltas.push(0.01);\r\n      scene.add(line);\r\n    }\r\n    camera.position.z = 10;\r\n    let animate = function () {\r\n      requestAnimationFrame( animate );\r\n      lines.forEach((line, index) => {\r\n        console.log(index);\r\n        if (line.rotation.y > 1.6) {\r\n          angleDeltas[index] = -(angleDeltas[index]);\r\n        }\r\n        if (line.rotation.y < -1.6) {\r\n          angleDeltas[index] = -(angleDeltas[index]);\r\n        }\r\n        line.rotation.y += angleDeltas[index];\r\n      });\r\n      renderer.render( scene, camera );\r\n    };\r\n    animate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AnimationPanel\" ref={ref => (this.mount = ref)}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimationPanel;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AArDA;AACA;AAuDA;;;;A","sourceRoot":""}