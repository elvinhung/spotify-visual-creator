{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\elvin\\\\Development\\\\spotify-visual-creator\\\\components\\\\AnimationPanel.jsx\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React from 'react';\nimport '../styles/AnimationPanel.scss';\n\nvar AnimationPanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnimationPanel, _React$Component);\n\n  function AnimationPanel() {\n    _classCallCheck(this, AnimationPanel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AnimationPanel).apply(this, arguments));\n  }\n\n  _createClass(AnimationPanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      var renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5);\n      this.mount.appendChild(renderer.domElement);\n      var material = new THREE.LineBasicMaterial({\n        color: 0x13d247\n      });\n      var geometry = new THREE.Geometry();\n      geometry.vertices.push(new THREE.Vector3(0, 0.5, 10), new THREE.Vector3(0, 0, 0));\n      var angleDeltas = [];\n      var lines = [];\n\n      for (var i = 0; i < 20; i++) {\n        var line = new THREE.Line(geometry, material);\n\n        if (i < 10) {\n          line.rotateY(0.1 * i);\n        } else {\n          line.rotateY(-0.1 * (i - 10));\n        }\n\n        lines.push(line);\n        angleDeltas.push(0.01);\n        scene.add(line);\n      }\n\n      camera.position.z = 10;\n\n      var animate = function animate() {\n        requestAnimationFrame(animate);\n        lines.forEach(function (line, index) {\n          console.log(index);\n\n          if (line.rotation.y > 1.6) {\n            angleDeltas[index] = -angleDeltas[index];\n          }\n\n          if (line.rotation.y < -1.6) {\n            angleDeltas[index] = -angleDeltas[index];\n          }\n\n          line.rotation.y += angleDeltas[index];\n        });\n        renderer.render(scene, camera);\n      };\n\n      animate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return __jsx(\"div\", {\n        className: \"AnimationPanel\",\n        ref: function ref(_ref) {\n          return _this.mount = _ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return AnimationPanel;\n}(React.Component);\n\nexport default AnimationPanel;","map":{"version":3,"sources":["C:/Users/elvin/Development/spotify-visual-creator/components/AnimationPanel.jsx"],"names":["THREE","React","AnimationPanel","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","material","LineBasicMaterial","color","geometry","Geometry","vertices","push","Vector3","angleDeltas","lines","i","line","Line","rotateY","add","position","z","animate","requestAnimationFrame","forEach","index","console","log","rotation","y","render","ref","Component"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\r\nimport React from 'react';\r\nimport '../styles/AnimationPanel.scss'\r\n\r\nclass AnimationPanel extends React.Component {\r\n\r\n  componentDidMount() {\r\n    let scene = new THREE.Scene();\r\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n    let renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5);\r\n    this.mount.appendChild(renderer.domElement);\r\n    let material = new THREE.LineBasicMaterial({\r\n      color: 0x13d247,\r\n    });\r\n\r\n    let geometry = new THREE.Geometry();\r\n    geometry.vertices.push(\r\n      new THREE.Vector3( 0, 0.5, 10 ),\r\n      new THREE.Vector3( 0, 0, 0 )\r\n    );\r\n\r\n    let angleDeltas = [];\r\n    let lines = [];\r\n    for (let i = 0; i < 20; i++) {\r\n      const line = new THREE.Line(geometry, material);\r\n      if (i < 10) {\r\n        line.rotateY(0.1 * i);\r\n      } else {\r\n        line.rotateY(-0.1 * (i - 10));\r\n      }\r\n      lines.push(line);\r\n      angleDeltas.push(0.01);\r\n      scene.add(line);\r\n    }\r\n    camera.position.z = 10;\r\n    let animate = function () {\r\n      requestAnimationFrame( animate );\r\n      lines.forEach((line, index) => {\r\n        console.log(index);\r\n        if (line.rotation.y > 1.6) {\r\n          angleDeltas[index] = -(angleDeltas[index]);\r\n        }\r\n        if (line.rotation.y < -1.6) {\r\n          angleDeltas[index] = -(angleDeltas[index]);\r\n        }\r\n        line.rotation.y += angleDeltas[index];\r\n      });\r\n      renderer.render( scene, camera );\r\n    };\r\n    animate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AnimationPanel\" ref={ref => (this.mount = ref)}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimationPanel;"]},"metadata":{},"sourceType":"module"}