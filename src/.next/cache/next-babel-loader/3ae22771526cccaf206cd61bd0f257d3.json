{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React from 'react';\nimport '../styles/AnimationPanel.scss';\n\nclass AnimationPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"play\", () => {\n      this.setState(currentState => ({\n        isPlaying: !currentState.isPlaying\n      }), () => {\n        this.animate();\n      });\n    });\n\n    this.state = {\n      isPlaying: false,\n      items: this.props.items\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.items.length !== this.props.items.length) {\n      console.log('prevProps diff from currProps');\n      this.setState({\n        items: this.props.items\n      });\n    }\n  }\n\n  createCube() {\n    let geometry = new THREE.BoxGeometry(1, 1, 1);\n    let material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    let cube = new THREE.Mesh(geometry, material);\n    cube.translateX(Math.random() * 20);\n    return cube;\n  }\n\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5);\n    this.mount.appendChild(this.renderer.domElement);\n    this.state.items.forEach(item => {\n      if (item === 'square') {\n        this.scene.add(this.createCube());\n      }\n    });\n    this.camera.position.z = 5;\n\n    this.animate = () => {\n      console.log('animating');\n\n      if (this.state.isPlaying) {\n        this.camera.position.z += 0.01;\n        requestAnimationFrame(this.animate);\n        this.renderer.render(this.scene, this.camera);\n      }\n    };\n  }\n\n  render() {\n    console.log('rendering animation panel');\n    return __jsx(\"div\", {\n      className: \"AnimationPanel\"\n    }, __jsx(\"div\", {\n      ref: ref => this.mount = ref\n    }), __jsx(\"button\", {\n      onClick: this.play\n    }, this.state.isPlaying ? 'pause' : 'play'));\n  }\n\n}\n\nexport default AnimationPanel;","map":null,"metadata":{},"sourceType":"module"}