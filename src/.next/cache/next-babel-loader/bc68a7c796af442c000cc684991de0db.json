{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React from 'react';\nimport '../styles/AnimationPanel.scss';\n\nvar AnimationPanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnimationPanel, _React$Component);\n\n  function AnimationPanel(props) {\n    var _this;\n\n    _classCallCheck(this, AnimationPanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimationPanel).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"play\", function () {\n      _this.isPlaying = !_this.isPlaying;\n\n      _this.setState({});\n\n      _this.animate();\n    });\n\n    return _this;\n  }\n\n  _createClass(AnimationPanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.isPlaying = false;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5);\n      this.mount.appendChild(this.renderer.domElement);\n      var material = new THREE.LineBasicMaterial({\n        color: 0xfd44f5\n      });\n      var geometry = new THREE.Geometry();\n      geometry.vertices.push(new THREE.Vector3(0, 0, 10), new THREE.Vector3(0, 0, 0));\n      var angleDeltas = [];\n      var lines = [];\n\n      for (var i = 0; i < 40; i++) {\n        var line = new THREE.Line(geometry, material);\n\n        if (i < 20) {\n          line.translateY(0.07 * i);\n          line.translateX(-10);\n          angleDeltas.push(-0.02);\n        } else {\n          line.translateY(-0.07 * (i - 20));\n          line.translateX(10);\n          angleDeltas.push(0.02);\n        }\n\n        lines.push(line);\n        this.scene.add(line);\n      }\n\n      this.camera.position.z = 10;\n\n      this.animate = function () {\n        if (!_this2.isPlaying) {\n          return;\n        }\n\n        requestAnimationFrame(_this2.animate);\n        lines.forEach(function (line, index) {\n          if (line.rotation.y > 1.6) {\n            angleDeltas[index] = -angleDeltas[index];\n          }\n\n          if (line.rotation.y < -1.6) {\n            angleDeltas[index] = -angleDeltas[index];\n          }\n\n          line.rotation.y += angleDeltas[index];\n        });\n\n        _this2.renderer.render(_this2.scene, _this2.camera);\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return __jsx(\"div\", {\n        className: \"AnimationPanel\"\n      }, __jsx(\"div\", {\n        ref: function ref(_ref) {\n          return _this3.mount = _ref;\n        }\n      }), __jsx(\"button\", {\n        onClick: this.play\n      }, this.isPlaying ? 'pause' : 'play'));\n    }\n  }]);\n\n  return AnimationPanel;\n}(React.Component);\n\nexport default AnimationPanel;","map":null,"metadata":{},"sourceType":"module"}