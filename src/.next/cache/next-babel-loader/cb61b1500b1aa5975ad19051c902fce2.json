{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React from 'react';\nimport '../styles/AnimationPanel.scss';\n\nclass AnimationPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"play\", () => {\n      this.isPlaying = !this.isPlaying;\n      this.setState({});\n      this.animate();\n    });\n  }\n\n  componentDidMount() {\n    this.isPlaying = false;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5);\n    this.mount.appendChild(this.renderer.domElement);\n    let material = new THREE.LineBasicMaterial({\n      color: 0xffffff\n    });\n    let geometry = new THREE.Geometry();\n    geometry.vertices.push(new THREE.Vector3(0, -0.5, 10), new THREE.Vector3(0, -0.5, 0));\n    let angleDeltas = [];\n    let lines = [];\n\n    for (let i = 0; i < 20; i++) {\n      const line = new THREE.Line(geometry, material);\n\n      if (i < 10) {\n        line.translateY(0.1 * i);\n        line.translateX(-5);\n        angleDeltas.push(0.02);\n      } else {\n        line.translateY(0.1 * (i - 10));\n        line.translateX(5);\n        angleDeltas.push(-0.02);\n      }\n\n      lines.push(line);\n      this.scene.add(line);\n    }\n\n    this.camera.position.z = 5;\n\n    this.animate = () => {\n      if (!this.isPlaying) {\n        return;\n      }\n\n      requestAnimationFrame(this.animate);\n      lines.forEach((line, index) => {\n        if (index < 10) {\n          if (line.rotation.y > 1.6) {\n            angleDeltas[index] = -angleDeltas[index];\n          }\n\n          if (line.rotation.y < 0) {\n            angleDeltas[index] = -angleDeltas[index];\n          }\n        } else {\n          if (line.rotation.y > 0) {\n            angleDeltas[index] = -angleDeltas[index];\n          }\n\n          if (line.rotation.y < -1.6) {\n            angleDeltas[index] = -angleDeltas[index];\n          }\n        }\n\n        line.rotation.y += angleDeltas[index];\n      });\n      this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"AnimationPanel\"\n    }, __jsx(\"div\", {\n      ref: ref => this.mount = ref\n    }), __jsx(\"button\", {\n      onClick: this.play\n    }, this.isPlaying ? 'pause' : 'play'));\n  }\n\n}\n\nexport default AnimationPanel;","map":null,"metadata":{},"sourceType":"module"}