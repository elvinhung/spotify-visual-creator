{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React from 'react';\nimport '../styles/AnimationPanel.scss';\n\nconst createObject = type => {\n  switch (type) {\n    case \"Cube\":\n      {\n        return createCube();\n      }\n\n    case \"Sphere\":\n      {\n        return createSphere();\n      }\n\n    default:\n      {\n        console.log(\"invalid type of object\");\n        return null;\n      }\n  }\n};\n\nconst createSphere = () => {\n  const geometry = new THREE.SphereGeometry(1, 10, 10);\n  const geo = new THREE.EdgesGeometry(geometry);\n  const mat = new THREE.LineBasicMaterial({\n    color: 0xffffff,\n    linewidth: 2\n  });\n  const wireframe = new THREE.LineSegments(geo, mat);\n  wireframe.translateY(Math.random() * 5 - 2.5);\n  return wireframe;\n};\n\nconst createCube = () => {\n  const geometry = new THREE.BoxGeometry(1, 1, 1);\n  const geo = new THREE.EdgesGeometry(geometry);\n  const mat = new THREE.LineBasicMaterial({\n    color: 0xffffff,\n    linewidth: 2\n  });\n  let wireframe = new THREE.LineSegments(geo, mat);\n  wireframe.translateX(Math.random() * 5 - 2.5);\n  return wireframe;\n};\n\nclass AnimationPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"play\", () => {\n      this.setState(currentState => ({\n        isPlaying: !currentState.isPlaying\n      }), () => {\n        this.animate();\n      });\n    });\n\n    this.sceneObjects = [];\n    this.state = {\n      isPlaying: false,\n      items: this.props.items\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.items.length !== this.props.items.length) {\n      console.log('prevProps diff from currProps');\n      this.setState({\n        items: this.props.items\n      }, () => {\n        const lastAddedItem = this.props.items[this.props.items.length - 1];\n        const object = createObject(lastAddedItem);\n\n        if (object) {\n          this.sceneObjects = this.sceneObjects.concat(object);\n          this.scene.add(object);\n          this.animate();\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5);\n    this.mount.appendChild(this.renderer.domElement);\n    this.camera.position.z = 5;\n\n    this.animate = () => {\n      console.log('animating');\n\n      if (this.state.isPlaying) {\n        this.sceneObjects.forEach(item => {\n          item.rotateX(0.01);\n          item.rotateY(0.005);\n        });\n        requestAnimationFrame(this.animate);\n        this.renderer.render(this.scene, this.camera);\n      } else {\n        this.renderer.render(this.scene, this.camera);\n      }\n    };\n  }\n\n  render() {\n    console.log('rendering animation panel');\n    return __jsx(\"div\", {\n      className: \"AnimationPanel\"\n    }, __jsx(\"div\", {\n      ref: ref => this.mount = ref\n    }), __jsx(\"button\", {\n      onClick: this.play\n    }, this.state.isPlaying ? 'pause' : 'play'));\n  }\n\n}\n\nexport default AnimationPanel;","map":null,"metadata":{},"sourceType":"module"}