{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport React from 'react';\nimport '../styles/AnimationPanel.scss';\nvar defaultMaterial = new THREE.LineBasicMaterial({\n  color: 0xffffff,\n  linewidth: 2\n});\n\nvar createObject = function createObject(type) {\n  switch (type) {\n    case \"Cube\":\n      {\n        return createCube();\n      }\n\n    case \"Sphere\":\n      {\n        return createSphere();\n      }\n\n    case \"Cone\":\n      {\n        return createCone();\n      }\n\n    default:\n      {\n        console.log(\"invalid type of object\");\n        return null;\n      }\n  }\n};\n\nvar createSphere = function createSphere() {\n  var geometry = new THREE.SphereGeometry(1, 10, 10);\n  var geo = new THREE.EdgesGeometry(geometry);\n  var wireframe = new THREE.LineSegments(geo, defaultMaterial);\n  wireframe.translateY(Math.random() * 5 - 2.5);\n  return wireframe;\n};\n\nvar createCube = function createCube() {\n  var geometry = new THREE.BoxGeometry(1, 1, 1);\n  var geo = new THREE.EdgesGeometry(geometry);\n  var wireframe = new THREE.LineSegments(geo, defaultMaterial);\n  wireframe.translateX(Math.random() * 5 - 2.5);\n  return wireframe;\n};\n\nvar createCone = function createCone() {\n  var geometry = new THREE.ConeGeometry(1, 1, 10, 10);\n  var geo = new THREE.EdgesGeometry(geometry);\n  var wireframe = new THREE.LineSegments(geo, defaultMaterial);\n  wireframe.translateX(Math.random() * 5 - 2.5);\n  wireframe.translateY(Math.random() * 5 - 2.5);\n  return wireframe;\n};\n\nvar AnimationPanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnimationPanel, _React$Component);\n\n  function AnimationPanel(props) {\n    var _this;\n\n    _classCallCheck(this, AnimationPanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimationPanel).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"play\", function () {\n      _this.setState(function (currentState) {\n        return {\n          isPlaying: !currentState.isPlaying\n        };\n      }, function () {\n        _this.animate();\n      });\n    });\n\n    _this.sceneObjects = [];\n    _this.state = {\n      isPlaying: false,\n      items: _this.props.items\n    };\n    return _this;\n  }\n\n  _createClass(AnimationPanel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this2 = this;\n\n      if (prevProps.items.length !== this.props.items.length) {\n        console.log('prevProps diff from currProps');\n        this.setState({\n          items: this.props.items\n        }, function () {\n          var lastAddedItem = _this2.props.items[_this2.props.items.length - 1];\n          var object = createObject(lastAddedItem);\n\n          if (object) {\n            _this2.sceneObjects = _this2.sceneObjects.concat(object);\n\n            _this2.scene.add(object);\n\n            _this2.animate();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5);\n      this.mount.appendChild(this.renderer.domElement);\n      this.camera.position.z = 5;\n\n      this.animate = function () {\n        console.log('animating');\n\n        if (_this3.state.isPlaying) {\n          _this3.sceneObjects.forEach(function (item) {\n            item.rotateX(0.01);\n            item.rotateY(0.005);\n          });\n\n          requestAnimationFrame(_this3.animate);\n\n          _this3.renderer.render(_this3.scene, _this3.camera);\n        } else {\n          _this3.renderer.render(_this3.scene, _this3.camera);\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      console.log('rendering animation panel');\n      return __jsx(\"div\", {\n        className: \"AnimationPanel\"\n      }, __jsx(\"div\", {\n        ref: function ref(_ref) {\n          return _this4.mount = _ref;\n        }\n      }), __jsx(\"button\", {\n        onClick: this.play\n      }, this.state.isPlaying ? 'pause' : 'play'));\n    }\n  }]);\n\n  return AnimationPanel;\n}(React.Component);\n\nexport default AnimationPanel;","map":null,"metadata":{},"sourceType":"module"}